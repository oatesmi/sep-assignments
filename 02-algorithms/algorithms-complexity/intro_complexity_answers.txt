1. Describe an analogy for relating an algorithm that has efficiency O(1) and
  another algorithm that has O(2^n).
    An algorithm that has O(1) is a world class sprinter. An algorithm that has
    O(2^n) is a dude jogging around the block in your neighborhood.

2. In plain English, what is the best case scenario for binary search?
  You find the item you are searching for in the first pass, right in the middle
  of the array.

3. In plain English, what is the worst case scenario for binary search?
  The item you are searching for is at the first or last index of the array.

4. In plain English, what is the bounded-case scenario for binary search?
  The item you are searching for is somewhere between the first and last index
  of the array.

5. Create a graph.
  https://docs.google.com/spreadsheets/d/1Nf4cvNKuB_H5X8BrNzf-yBIK0eMzlGsWhxDC71-V5zM/edit?usp=sharing
  see sheet 1

6. What is the limit of the function above as n approaches infinity?
  positive infinity as n approaches infinity

7. What is the Big-O of an algorithm that has the data points above?
  O(2^n)

8. Write a Ruby method that takes a number n. This method must print the
  worst-case number of iterations for linear search to find an item in collections
  of size one to n. Use it to generate a table of worst-case iterations of
  collections up to size 10.

    def linear_example(n)
      for i in 1..n
        puts "#{i}, #{i}"
      end
    end

    linear_example(10)

    1, 1
    2, 2
    3, 3
    4, 4
    5, 5
    6, 6
    7, 7
    8, 8
    9, 9
    10, 10

9. Create a graph from the output using Google Sheets or other graphing software.
  Analyze the graph and denote its Big-O somewhere on the graph.
  https://docs.google.com/spreadsheets/d/1Nf4cvNKuB_H5X8BrNzf-yBIK0eMzlGsWhxDC71-V5zM/edit?usp=sharing
  see sheet 2

10. What is the Big-O of binary search?
  O(log n)

11. What is the Big-Ω of binary search?
  Ω(1)
12. What is the Big-Ө of binary search?
  O(long n)
